"""
    Quantum Network Explorer

    Server for the QNE project  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.final_result import FinalResult


class FinalResultsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_final_result(
            self,
            body,
            **kwargs
        ):
            """Add a FinalResult for the authenticated Backend  # noqa: E501

            Typically only used by quantum network backends. When a Backend has executed all rounds of the RoundSet for an Experiment and has calculated the FinalResult, the FinalResult for the RoundSet is sent to api-router to register the FinalResult to the RoundSet.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_final_result(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (FinalResult): FinalResult that needs to be added.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FinalResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_final_result = _Endpoint(
            settings={
                'response_type': (FinalResult,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/final-results/',
                'operation_id': 'create_final_result',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (FinalResult,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_final_result
        )

        def __final_results_latest_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, get the latest FinalResults for a Experiment uniquely identified by <id>  # noqa: E501

            The FinalResult of the latest completed RoundSet of the specific Experiment is returned. Only completed RoundSets have a FinalResult. When a RoundSet is not yet completed, the FinalResult of the previous completed RoundSet is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.final_results_latest_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FinalResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.final_results_latest_experiment = _Endpoint(
            settings={
                'response_type': (FinalResult,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/final-results/latest/',
                'operation_id': 'final_results_latest_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__final_results_latest_experiment
        )

        def __final_results_round_set(
            self,
            round_set_id,
            **kwargs
        ):
            """For the authenticated user, get FinalResult for the RoundSet uniquely identified by <id>  # noqa: E501

            Get the FinalResult that is linked to the specific RoundSet. Only completed RoundSets have a FinalResult.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.final_results_round_set(round_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [FinalResult]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            return self.call_with_http_info(**kwargs)

        self.final_results_round_set = _Endpoint(
            settings={
                'response_type': ([FinalResult],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/final-results/',
                'operation_id': 'final_results_round_set',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                ],
                'required': [
                    'round_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__final_results_round_set
        )

        def __retrieve_final_result(
            self,
            final_result_id,
            **kwargs
        ):
            """For the authenticated user, get FinalResult uniquely identified by <id>  # noqa: E501

            Get the specific FinalResult. The FinalResult is linked to a RoundSet of an Experiment owned by the user. Only RoundSets that have been registered as completed by an executing Backend, have FinalResults.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieve_final_result(final_result_id, async_req=True)
            >>> result = thread.get()

            Args:
                final_result_id (int): ID of FinalResult

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FinalResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['final_result_id'] = \
                final_result_id
            return self.call_with_http_info(**kwargs)

        self.retrieve_final_result = _Endpoint(
            settings={
                'response_type': (FinalResult,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/final-results/{final-result-id}/',
                'operation_id': 'retrieve_final_result',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'final_result_id',
                ],
                'required': [
                    'final_result_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'final_result_id':
                        (int,),
                },
                'attribute_map': {
                    'final_result_id': 'final-result-id',
                },
                'location_map': {
                    'final_result_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_final_result
        )
