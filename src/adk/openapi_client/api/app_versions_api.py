"""
    Quantum Network Explorer

    Server for the QNE project  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.app_config import AppConfig
from openapi_client.model.app_result import AppResult
from openapi_client.model.app_source import AppSource
from openapi_client.model.app_version import AppVersion


class AppVersionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __app_config_app_version(
            self,
            version_id,
            **kwargs
        ):
            """For the authenticated user, get the AppConfig that is linked to the AppVersion uniquely identified by <id>  # noqa: E501

            For the authenticated user, get the AppConfig that is linked to this specific AppVersion. Every AppVersion relates a specific AppSource and a specific AppConfig to an Application. Typically used by the authenticated user to get the AppConfig for a specific AppVersion.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.app_config_app_version(version_id, async_req=True)
            >>> result = thread.get()

            Args:
                version_id (int): ID of AppVersion

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppConfig
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.app_config_app_version = _Endpoint(
            settings={
                'response_type': (AppConfig,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/app-versions/{version-id}/app-config/',
                'operation_id': 'app_config_app_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_id',
                ],
                'required': [
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'version_id': 'version-id',
                },
                'location_map': {
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'appconfig/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__app_config_app_version
        )

        def __app_result_app_version(
            self,
            version_id,
            **kwargs
        ):
            """For the authenticated user, get the AppResult that is linked to the AppVersion uniquely identified by <id>  # noqa: E501

            For the authenticated user, get the AppResult that is linked to this specific AppVersion. Every AppVersion relates a specific AppSource, AppConfig and AppResult to an Application. Typically used by the authenticated user to get the AppResult for a specific AppVersion.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.app_result_app_version(version_id, async_req=True)
            >>> result = thread.get()

            Args:
                version_id (int): ID of AppVersion

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.app_result_app_version = _Endpoint(
            settings={
                'response_type': (AppResult,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/app-versions/{version-id}/app-result/',
                'operation_id': 'app_result_app_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_id',
                ],
                'required': [
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'version_id': 'version-id',
                },
                'location_map': {
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'appconfig/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__app_result_app_version
        )

        def __app_source_app_version(
            self,
            version_id,
            **kwargs
        ):
            """For the authenticated backend, get the AppSource that is linked to the AppVersion uniquely identified by <id>  # noqa: E501

            For the authenticated backend, get the AppSource that is linked to this specific AppVersion. Every AppVersion relates a specific AppSource and a specific AppConfig to an Application. Typically used by the authenticated backend to get the AppSource for a specific AppVersion.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.app_source_app_version(version_id, async_req=True)
            >>> result = thread.get()

            Args:
                version_id (int): ID of AppVersion

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppSource
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.app_source_app_version = _Endpoint(
            settings={
                'response_type': (AppSource,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/app-versions/{version-id}/app-source/',
                'operation_id': 'app_source_app_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_id',
                ],
                'required': [
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'version_id': 'version-id',
                },
                'location_map': {
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'appsource/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__app_source_app_version
        )

        def __app_versions_application(
            self,
            app_id,
            **kwargs
        ):
            """Returns all enabled AppVersions of the Application uniquely identified by <id>  # noqa: E501

            Returns all enabled AppVersions of the specific Application. The latest AppVersion is defined as the highest enabled AppVersion of an Application.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.app_versions_application(app_id, async_req=True)
            >>> result = thread.get()

            Args:
                app_id (int): ID of Application

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AppVersion]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['app_id'] = \
                app_id
            return self.call_with_http_info(**kwargs)

        self.app_versions_application = _Endpoint(
            settings={
                'response_type': ([AppVersion],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/applications/{app-id}/app-versions/',
                'operation_id': 'app_versions_application',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'app_id',
                ],
                'required': [
                    'app_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'app_id':
                        (int,),
                },
                'attribute_map': {
                    'app_id': 'app-id',
                },
                'location_map': {
                    'app_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__app_versions_application
        )

        def __app_versions_latest_application(
            self,
            app_id,
            **kwargs
        ):
            """Returns the latest AppVersion of the Application uniquely identified by <id>  # noqa: E501

            Returns the latest AppVersion of the specific Application. The latest AppVersion is defined as the highest enabled AppVersion of an Application.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.app_versions_latest_application(app_id, async_req=True)
            >>> result = thread.get()

            Args:
                app_id (int): ID of Application

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['app_id'] = \
                app_id
            return self.call_with_http_info(**kwargs)

        self.app_versions_latest_application = _Endpoint(
            settings={
                'response_type': (AppVersion,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/applications/{app-id}/app-versions/latest/',
                'operation_id': 'app_versions_latest_application',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'app_id',
                ],
                'required': [
                    'app_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'app_id':
                        (int,),
                },
                'attribute_map': {
                    'app_id': 'app-id',
                },
                'location_map': {
                    'app_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__app_versions_latest_application
        )

        def __create_app_version(
            self,
            body,
            **kwargs
        ):
            """Add an AppVersion to an Application for the authenticated user  # noqa: E501

            A new AppVersion is created when the Application is under construction (draft) and owned by the authenticated user. AppVersion is disabled by default. AppVersion version number is auto-incremented.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_app_version(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (AppVersion): Details for an AppVersion.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_app_version = _Endpoint(
            settings={
                'response_type': (AppVersion,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/app-versions/',
                'operation_id': 'create_app_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (AppVersion,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_app_version
        )

        def __retrieve_app_version(
            self,
            version_id,
            **kwargs
        ):
            """Get AppVersion uniquely identified by <id>  # noqa: E501

            Returns details of a specific AppVersion. Every AppVersion relates a specific AppSource and a specific AppConfig to an Application. Typically only the latest AppVersion is used in QNE editor. The latest AppVersion is defined as the highest enabled AppVersion of an Application.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieve_app_version(version_id, async_req=True)
            >>> result = thread.get()

            Args:
                version_id (int): ID of AppVersion

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AppVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['version_id'] = \
                version_id
            return self.call_with_http_info(**kwargs)

        self.retrieve_app_version = _Endpoint(
            settings={
                'response_type': (AppVersion,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/app-versions/{version-id}/',
                'operation_id': 'retrieve_app_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'version_id',
                ],
                'required': [
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'version_id':
                        (int,),
                },
                'attribute_map': {
                    'version_id': 'version-id',
                },
                'location_map': {
                    'version_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_app_version
        )
