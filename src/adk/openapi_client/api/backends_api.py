"""
    Quantum Network Explorer

    Server for the QNE project  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.backend import Backend


class BackendsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __list_backends(
            self,
            **kwargs
        ):
            """Return a list of all the existing Backends.  # noqa: E501

            Return a list of all the existing Backends.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_backends(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Backend]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_backends = _Endpoint(
            settings={
                'response_type': ([Backend],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/backends/',
                'operation_id': 'list_backends',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_backends
        )

        def __partial_update_backend(
            self,
            backend_id,
            body,
            **kwargs
        ):
            """For the authenticated Backend, update the status or heartbeat of the Backend uniquely identified by <id>  # noqa: E501

            Update a Backend instance. Updates the status or heartbeat of the specific Backend. The status of the Backend is changed from IDLE to EXECUTION when the Backend is picking up an Experiment and back to IDLE when it has finished executing an Experiment. The Backend also can be registered as OFFLINE when it is not able to pick up Experiments. The heartbeat is sent to the api-router as a sign of life. When no heart beat is received within a predefined period the api-router concludes that the Backend has crashed and will take measures as rescheduling Experiments that were running on that Backend. Note that the Backend sends its current time as a parameter. The api-router should instead register the current time of the api-router itself but can use the parameter to calculate time-differences due to not synchronised clocks or network delay between Backend and api-router.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.partial_update_backend(backend_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                backend_id (int): ID of Backend
                body (Backend): Backend that needs to be updated.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Backend
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['backend_id'] = \
                backend_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.partial_update_backend = _Endpoint(
            settings={
                'response_type': (Backend,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/backends/{backend-id}/',
                'operation_id': 'partial_update_backend',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'backend_id',
                    'body',
                ],
                'required': [
                    'backend_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'backend_id':
                        (int,),
                    'body':
                        (Backend,),
                },
                'attribute_map': {
                    'backend_id': 'backend-id',
                },
                'location_map': {
                    'backend_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__partial_update_backend
        )

        def __retrieve_backend(
            self,
            backend_id,
            **kwargs
        ):
            """Return the requested Backend uniquely identified by <id>.  # noqa: E501

            Get the specific Backend details  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieve_backend(backend_id, async_req=True)
            >>> result = thread.get()

            Args:
                backend_id (int): ID of Backend

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Backend
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['backend_id'] = \
                backend_id
            return self.call_with_http_info(**kwargs)

        self.retrieve_backend = _Endpoint(
            settings={
                'response_type': (Backend,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/backends/{backend-id}/',
                'operation_id': 'retrieve_backend',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'backend_id',
                ],
                'required': [
                    'backend_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'backend_id':
                        (int,),
                },
                'attribute_map': {
                    'backend_id': 'backend-id',
                },
                'location_map': {
                    'backend_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_backend
        )
