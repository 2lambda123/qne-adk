"""
    Quantum Network Explorer

    Server for the QNE project  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.asset import Asset
from openapi_client.model.experiment import Experiment
from openapi_client.model.final_result import FinalResult
from openapi_client.model.result import Result
from openapi_client.model.round_set import RoundSet


class ExperimentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __assets_latest_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For an Experiment uniquely identified by <id> of the authenticated user, get the latest Asset for which no RoundSet has been defined  # noqa: E501

            For a specific Experiment get the latest Asset for which no RoundSet has been defined. This is the Asset that is used to hold the network and application data (based on user input) for the (optionally) next RoundSet. When the Experiment has no Assets or a RoundSet is already linked to the Asset an error is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.assets_latest_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Asset]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.assets_latest_experiment = _Endpoint(
            settings={
                'response_type': ([Asset],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/assets/latest/',
                'operation_id': 'assets_latest_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__assets_latest_experiment
        )

        def __create_experiment(
            self,
            body,
            **kwargs
        ):
            """Add an Experiment for the authenticated user  # noqa: E501

            A new Experiment is created for the authenticated user if the linked AppVersion is the latest version of an Application.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_experiment(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (Experiment): Details for an Experiment. The AppVersion must be the latest version of an Application.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Experiment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_experiment = _Endpoint(
            settings={
                'response_type': (Experiment,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/',
                'operation_id': 'create_experiment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (Experiment,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_experiment
        )

        def __destroy_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, remove Experiment uniquely identified by <id>  # noqa: E501

            The specific Experiment, is deleted. Also the linked entities like Assets, RoundSets, Results and FinalResults are deleted.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.destroy_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.destroy_experiment = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/',
                'operation_id': 'destroy_experiment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__destroy_experiment
        )

        def __final_results_latest_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, get the latest FinalResults for a Experiment uniquely identified by <id>  # noqa: E501

            The FinalResult of the latest completed RoundSet of the specific Experiment is returned. Only completed RoundSets have a FinalResult. When a RoundSet is not yet completed, the FinalResult of the previous completed RoundSet is returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.final_results_latest_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FinalResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.final_results_latest_experiment = _Endpoint(
            settings={
                'response_type': (FinalResult,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/final-results/latest/',
                'operation_id': 'final_results_latest_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__final_results_latest_experiment
        )

        def __list_experiments(
            self,
            **kwargs
        ):
            """List all existing experiments owned the authenticated user or all for an admin  # noqa: E501

            A user can have multiple Experiments. All the Experiments that are related to the authenticated user are listed. The administrator gets all Experiments. There can be more Experiments for the same Application. There can also be Experiments for different versions of the same Application.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_experiments(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Experiment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_experiments = _Endpoint(
            settings={
                'response_type': ([Experiment],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/',
                'operation_id': 'list_experiments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_experiments
        )

        def __partial_update_experiment(
            self,
            exp_id,
            body,
            **kwargs
        ):
            """For the authenticated user, update the Experiment uniquely identified by <id>  # noqa: E501

            The specific Experiment, can be marked/unmarked or a personal note can be added/adjusted. The other fields are fixed and cannot be changed.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.partial_update_experiment(exp_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment
                body (Experiment): Experiment that needs to be updated.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Experiment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.partial_update_experiment = _Endpoint(
            settings={
                'response_type': (Experiment,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/',
                'operation_id': 'partial_update_experiment',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                    'body',
                ],
                'required': [
                    'exp_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                    'body':
                        (Experiment,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__partial_update_experiment
        )

        def __results_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """List Results for Experiment uniquely identified by <id>  # noqa: E501

            For the authenticated Backend, returns all the Results for all the RoundSets for the specific Experiment. The Results are linked to one or more RoundSets that have been executed for the Experiment. When a Backend starts executing a new RoundSet for an Experiment it needs all the previous Results of the Experiment to calculate new cumulative Results. For the authenticated user, returns only the Results for RoundSets for Experiment with <id> that have status COMPLETE or FAILED. The Results are sorted on round-set-id (low to high) and for each RoundSet on the Results round number.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.results_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Result]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.results_experiment = _Endpoint(
            settings={
                'response_type': ([Result],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/results/',
                'operation_id': 'results_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__results_experiment
        )

        def __retrieve_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user or backend user, get Experiment uniquely identified <id>  # noqa: E501

            The specific Experiment is returned. Used by backends and users.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieve_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Experiment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.retrieve_experiment = _Endpoint(
            settings={
                'response_type': (Experiment,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/',
                'operation_id': 'retrieve_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_experiment
        )

        def __round_sets_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, list RoundSets for Experiment uniquely identified by <id>  # noqa: E501

            Returns all the RoundSets for a specific Experiment. The RoundSets are sorted low to high on round-set-id. Only the status of the latest RoundSet for an Experiment can be different than COMPLETE  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.round_sets_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [RoundSet]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.round_sets_experiment = _Endpoint(
            settings={
                'response_type': ([RoundSet],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/round-sets/',
                'operation_id': 'round_sets_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__round_sets_experiment
        )

        def __round_sets_latest_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, get latest RoundSet for Experiment uniquely identified by <id>  # noqa: E501

            For a specific Experiment, get the latest RoundSet that is linked. Only the status of the latest RoundSet for an Experiment can be different than COMPLETE.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.round_sets_latest_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.round_sets_latest_experiment = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/round-sets/latest/',
                'operation_id': 'round_sets_latest_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__round_sets_latest_experiment
        )
