"""
    Quantum Network Explorer

    Server for the QNE project  # noqa: E501

    The version of the OpenAPI document: 0.0.8
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.final_result import FinalResult
from openapi_client.model.inline_object import InlineObject
from openapi_client.model.inline_object1 import InlineObject1
from openapi_client.model.result import Result
from openapi_client.model.round_set import RoundSet


class RoundSetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __complete_round_set(
            self,
            round_set_id,
            **kwargs
        ):
            """For the authenticated Backend, set the status of the RoundSet uniquely identified by <id> to COMPLETE  # noqa: E501

            The quantum network Backend has finished executing the specific RoundSet. Results and FinalResult have been registered and a new Asset has been created. As a final step, the status of the RoundSet is set to COMPLETE.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.complete_round_set(round_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            return self.call_with_http_info(**kwargs)

        self.complete_round_set = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/complete/',
                'operation_id': 'complete_round_set',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                ],
                'required': [
                    'round_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__complete_round_set
        )

        def __create_round_set(
            self,
            body,
            **kwargs
        ):
            """For the authenticated user, add a RoundSet  # noqa: E501

            A new RoundSet is created for the authenticated user. A new RoundSet can only be created if the latest RoundSet has status COMPLETE and a new Asset is already added for the Experiment. A newly created RoundSet has status NEW.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_round_set(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (RoundSet): RoundSet that needs to be added.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_round_set = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/',
                'operation_id': 'create_round_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (RoundSet,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_round_set
        )

        def __fail_round_set(
            self,
            round_set_id,
            **kwargs
        ):
            """For the authenticated Backend, set the status of the RoundSet uniquely identified by <id> to FAILED  # noqa: E501

            The quantum network Backend ran into an error while executing the RoundSet. Results have been registered up to the point of failure. No FinalResult is posted, nor has a new Asset been created. As a final step, the status of the RoundSet is set to FAILED.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.fail_round_set(round_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            return self.call_with_http_info(**kwargs)

        self.fail_round_set = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/fail/',
                'operation_id': 'fail_round_set',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                ],
                'required': [
                    'round_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__fail_round_set
        )

        def __final_results_round_set(
            self,
            round_set_id,
            **kwargs
        ):
            """For the authenticated user, get FinalResult for the RoundSet uniquely identified by <id>  # noqa: E501

            Get the FinalResult that is linked to the specific RoundSet. Only completed RoundSets have a FinalResult.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.final_results_round_set(round_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [FinalResult]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            return self.call_with_http_info(**kwargs)

        self.final_results_round_set = _Endpoint(
            settings={
                'response_type': ([FinalResult],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/final-results/',
                'operation_id': 'final_results_round_set',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                ],
                'required': [
                    'round_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__final_results_round_set
        )

        def __list_round_sets(
            self,
            **kwargs
        ):
            """List all existing RoundSets of all Experiments for the authenticated user or all for an admin  # noqa: E501

            Returns the RoundSets for Experiments which are owned by me unless the user is the administrator who gets all RoundSets. Sorted in ascending order by round-set-id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_round_sets(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [RoundSet]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.list_round_sets = _Endpoint(
            settings={
                'response_type': ([RoundSet],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/',
                'operation_id': 'list_round_sets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_round_sets
        )

        def __partial_update_round_set(
            self,
            round_set_id,
            body,
            **kwargs
        ):
            """For the authenticated user, update RoundSet uniquely identified by <id>  # noqa: E501

            This endpoint only allows updating the description of a specific RoundSet  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.partial_update_round_set(round_set_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet
                body (InlineObject):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.partial_update_round_set = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/',
                'operation_id': 'partial_update_round_set',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                    'body',
                ],
                'required': [
                    'round_set_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                    'body':
                        (InlineObject,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__partial_update_round_set
        )

        def __results_round_set(
            self,
            round_set_id,
            **kwargs
        ):
            """For the authenticated user, list Results for the RoundSet uniquely identified by <id>  # noqa: E501

            Get all Results that are linked to the specific RoundSet. Only RoundSets that have been picked up by an executing Backend, have Results. The Results are sorted on round number (low to high).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.results_round_set(round_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Result]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            return self.call_with_http_info(**kwargs)

        self.results_round_set = _Endpoint(
            settings={
                'response_type': ([Result],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/results/',
                'operation_id': 'results_round_set',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                ],
                'required': [
                    'round_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__results_round_set
        )

        def __retrieve_round_set(
            self,
            round_set_id,
            **kwargs
        ):
            """For the authenticated user, get RoundSet uniquely identified by <id>  # noqa: E501

            Returns (details of) the specific RoundSet  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieve_round_set(round_set_id, async_req=True)
            >>> result = thread.get()

            Args:
                round_set_id (int): ID of RoundSet

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['round_set_id'] = \
                round_set_id
            return self.call_with_http_info(**kwargs)

        self.retrieve_round_set = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/{round-set-id}/',
                'operation_id': 'retrieve_round_set',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'round_set_id',
                ],
                'required': [
                    'round_set_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'round_set_id':
                        (int,),
                },
                'attribute_map': {
                    'round_set_id': 'round-set-id',
                },
                'location_map': {
                    'round_set_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_round_set
        )

        def __round_sets_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, list RoundSets for Experiment uniquely identified by <id>  # noqa: E501

            Returns all the RoundSets for a specific Experiment. The RoundSets are sorted low to high on round-set-id. Only the status of the latest RoundSet for an Experiment can be different than COMPLETE  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.round_sets_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [RoundSet]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.round_sets_experiment = _Endpoint(
            settings={
                'response_type': ([RoundSet],),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/round-sets/',
                'operation_id': 'round_sets_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__round_sets_experiment
        )

        def __round_sets_latest_experiment(
            self,
            exp_id,
            **kwargs
        ):
            """For the authenticated user, get latest RoundSet for Experiment uniquely identified by <id>  # noqa: E501

            For a specific Experiment, get the latest RoundSet that is linked. Only the status of the latest RoundSet for an Experiment can be different than COMPLETE.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.round_sets_latest_experiment(exp_id, async_req=True)
            >>> result = thread.get()

            Args:
                exp_id (int): ID of Experiment

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['exp_id'] = \
                exp_id
            return self.call_with_http_info(**kwargs)

        self.round_sets_latest_experiment = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/experiments/{exp-id}/round-sets/latest/',
                'operation_id': 'round_sets_latest_experiment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'exp_id',
                ],
                'required': [
                    'exp_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'exp_id':
                        (int,),
                },
                'attribute_map': {
                    'exp_id': 'exp-id',
                },
                'location_map': {
                    'exp_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__round_sets_latest_experiment
        )

        def __take_round_set(
            self,
            body,
            **kwargs
        ):
            """Try to find a RoundSet that can be picked up by the Backend  # noqa: E501

            Have the quantum network Backend claim a RoundSet to execute. The status of the RoundSet is changed to RUNNING. There can be more RoundSets available for different users to pick from. The QNE api-router implements a 'fair' strategy for serving RoundSets. When a new RoundSet is picked up get a RoundSet for a user not already running a RoundSet on another Backend. When more are returned pick the one that is the oldest (waiting the longest)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.take_round_set(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (InlineObject1):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RoundSet
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.take_round_set = _Endpoint(
            settings={
                'response_type': (RoundSet,),
                'auth': [
                    'api_key'
                ],
                'endpoint_path': '/round-sets/take/',
                'operation_id': 'take_round_set',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (InlineObject1,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__take_round_set
        )
